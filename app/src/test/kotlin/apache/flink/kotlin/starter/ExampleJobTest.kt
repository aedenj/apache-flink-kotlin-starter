/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package apache.flink.kotlin.starter

import kafka.server.`KafkaConfig$`
import net.mguenther.kafka.junit.EmbeddedKafkaCluster
import net.mguenther.kafka.junit.EmbeddedKafkaCluster.provisionWith
import net.mguenther.kafka.junit.EmbeddedKafkaClusterConfig.newClusterConfig
import net.mguenther.kafka.junit.EmbeddedKafkaConfig.brokers
import net.mguenther.kafka.junit.ObserveKeyValues.on
import net.mguenther.kafka.junit.SendValues.to
import org.assertj.core.api.Assertions.assertThatThrownBy
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import java.util.concurrent.CompletableFuture


@DisplayName("Example Job Test")
class ExampleJobTest {
    private val config = JobConfig.getInstance("test")
    private val kafka:EmbeddedKafkaCluster = provisionWith(newClusterConfig().configure(
        brokers().with(`KafkaConfig$`.`MODULE$`.ListenersProp(), "PLAINTEXT://" + config.brokers()))
    )

    @BeforeAll
    fun setup() {
        kafka.start()
    }

    @AfterAll
    fun tearDown() {
        kafka.stop()
    }

    @Test
    fun `three messages are consumed and produced`() {
        kafka.send(to("source","a", "b", "c"))
        val job = CompletableFuture.runAsync { main(arrayOf("--env", "test")) }

        kafka.observe(on("destination", 3))
        job.cancel(true)
    }

    @Test
    fun `job expects env variable`() {
        assertThatThrownBy { main(arrayOf("--XXXX", "test")) }
            .isInstanceOf(RuntimeException::class.java)
            .hasMessageContaining("No data for required key 'env'")
    }
}
